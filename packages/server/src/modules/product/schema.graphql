extend type Query {
  product(id: Int!): Product
  products(limit: Int!, after: Int!): Products
}

extend type Mutation {
  updateProduct(input: UpdateProductInput!): Product
  createProduct(input: CreateProductInput!): Product
  deleteProduct(input: DeleteProductInput!): ProductDeletedResponse
}

extend type Subscription {
  productUpdated(id: Int!): ProductUpdatedResponse
  productsUpdated(endCursor: Int!): ProductUpdatedResponse
}

type Product {
  id: Int!
  createdAt: String!
  updatedAt: String!
  title: String!
}

type Products {
  totalCount: Int
  edges: [ProductEdges]
  pageInfo: ProductPageInfo
}

type ProductEdges {
  node: Product
  cursor: Int
}

type ProductPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

input CreateProductInput {
  title: String!
}

input UpdateProductInput {
  id: Int!
  title: String!
}

input DeleteProductInput {
  id: Int!
}

type ProductUpdatedResponse {
  id: Int!
  mutation: String!
  node: Product
}

type ProductDeletedResponse {
  id: Int!
}
